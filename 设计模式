1、6大准则：
单一职责原则（类和方法，接口）一个类只承担一个职责。应该有且仅有一个原因引起类的变更。
开闭原则 （扩展开放，修改关闭）要求软件实体应该对扩展开放，对修改关闭。
里氏替换原则（基类和子类之间的关系）子类可以扩展父类的功能，但不能改变父类原有的功能；
依赖倒置原则（依赖抽象接口，而不是具体对象）高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象；
接口隔离原则（接口按照功能细分）庞大的接口拆分成更小的和更具体的接口
迪米特法则：一个对象应该对其它对象有最少的了解

2、单例模式：饿汉式：线程安全，类加载时就创建， 饱汉式：用到时才会创建，线程不安全，加锁
3、简单工厂模式：在类中判断，根据传进来的类型，创建不同的对象，违反开闭原则
   工厂方法模式：定义一个创建对象的接口看，让子类决定实例化哪个类
   抽象工厂模式：创建多个类型产品时，有需求可以创建相关产品子类和子工厂来获取
4、装饰器模式是指动态地给一个对象增加一些额外的功能，同时又不改变其结构。
优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
装饰器模式的关键：装饰器中使用了被装饰的对象。  
5、适配器模式是将一个类的接口变成客户端所期望的另一种接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作。

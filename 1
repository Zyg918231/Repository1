在 ARM 平台上编写一个手柄驱动程序，支持上下左右四个键，使用 GPIO 高电平表示按键按下，并通过 platform 和设备树来描述硬件配置。以下是完整的实现步骤和代码。

1. 设备树描述
首先，在设备树中定义手柄的 GPIO 按键。假设四个按键分别连接到 GPIO 引脚，高电平表示按键按下。

设备树源文件（DTS）
dts
复制
/dts-v1/;

/ {
    compatible = "mycompany,myboard";
    model = "MyBoard";

    gpio_keys {
        compatible = "mycompany,gpio-gamepad";
        button-up {
            label = "Up";
            gpios = <&gpio1 0 GPIO_ACTIVE_HIGH>; // GPIO1_0
            linux,code = <KEY_UP>;
        };
        button-down {
            label = "Down";
            gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>; // GPIO1_1
            linux,code = <KEY_DOWN>;
        };
        button-left {
            label = "Left";
            gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>; // GPIO1_2
            linux,code = <KEY_LEFT>;
        };
        button-right {
            label = "Right";
            gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>; // GPIO1_3
            linux,code = <KEY_RIGHT>;
        };
    };
};
设备树绑定（Binding）
在 Documentation/devicetree/bindings/input/mycompany,gpio-gamepad.yaml 中定义设备树绑定：

yaml
复制
# SPDX-License-Identifier: GPL-2.0
%YAML 1.2
---
$id: http://devicetree.org/schemas/input/mycompany,gpio-gamepad.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: MyCompany GPIO Gamepad

maintainers:
  - Your Name <your.email@example.com>

description: |
  This binding describes a simple GPIO-based gamepad with four directional buttons.

properties:
  compatible:
    const: mycompany,gpio-gamepad

  button-up:
    type: object
    description: Up button
    properties:
      label:
        type: string
      gpios:
        type: phandle
      linux,code:
        type: integer
    required:
      - label
      - gpios
      - linux,code

  button-down:
    type: object
    description: Down button
    properties:
      label:
        type: string
      gpios:
        type: phandle
      linux,code:
        type: integer
    required:
      - label
      - gpios
      - linux,code

  button-left:
    type: object
    description: Left button
    properties:
      label:
        type: string
      gpios:
        type: phandle
      linux,code:
        type: integer
    required:
      - label
      - gpios
      - linux,code

  button-right:
    type: object
    description: Right button
    properties:
      label:
        type: string
      gpios:
        type: phandle
      linux,code:
        type: integer
    required:
      - label
      - gpios
      - linux,code

required:
  - compatible
  - button-up
  - button-down
  - button-left
  - button-right

additionalProperties: false

examples:
  - |
    gpio_keys {
        compatible = "mycompany,gpio-gamepad";
        button-up {
            label = "Up";
            gpios = <&gpio1 0 GPIO_ACTIVE_HIGH>;
            linux,code = <KEY_UP>;
        };
        button-down {
            label = "Down";
            gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>;
            linux,code = <KEY_DOWN>;
        };
        button-left {
            label = "Left";
            gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
            linux,code = <KEY_LEFT>;
        };
        button-right {
            label = "Right";
            gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>;
            linux,code = <KEY_RIGHT>;
        };
    };
2. 驱动程序实现
编写一个基于 platform 的驱动程序，读取 GPIO 状态并通过 input 子系统上报按键事件。

驱动程序代码
c
复制
#include <linux/module.h>
#include <linux/platform_device.h>
#include <linux/input.h>
#include <linux/gpio/consumer.h>
#include <linux/interrupt.h>
#include <linux/slab.h>

#define DRIVER_NAME "gpio_gamepad"

struct gpio_gamepad_data {
    struct input_dev *input_dev;
    struct gpio_desc *buttons[4]; // Up, Down, Left, Right
    int irqs[4];                 // 中断号
};

static struct gpio_gamepad_data *gamepad;

// 中断处理函数
static irqreturn_t gpio_gamepad_isr(int irq, void *dev_id)
{
    int button = (int)dev_id;
    int state = gpiod_get_value(gamepad->buttons[button]);

    // 上报按键事件
    input_report_key(gamepad->input_dev, KEY_UP + button, state);
    input_sync(gamepad->input_dev);

    return IRQ_HANDLED;
}

// Platform 驱动的 probe 函数
static int gpio_gamepad_probe(struct platform_device *pdev)
{
    int i;
    int error;
    const char *button_labels[4] = { "button-up", "button-down", "button-left", "button-right" };

    // 分配 gamepad_data 结构
    gamepad = devm_kzalloc(&pdev->dev, sizeof(struct gpio_gamepad_data), GFP_KERNEL);
    if (!gamepad)
        return -ENOMEM;

    // 分配 input 设备
    gamepad->input_dev = devm_input_allocate_device(&pdev->dev);
    if (!gamepad->input_dev)
        return -ENOMEM;

    // 设置 input 设备
    gamepad->input_dev->name = DRIVER_NAME;
    gamepad->input_dev->phys = "gpio/gamepad";
    gamepad->input_dev->id.bustype = BUS_HOST;

    // 设置支持的按键事件
    for (i = 0; i < 4; i++) {
        set_bit(KEY_UP + i, gamepad->input_dev->keybit);
    }

    // 获取 GPIO 和设置中断
    for (i = 0; i < 4; i++) {
        gamepad->buttons[i] = devm_gpiod_get(&pdev->dev, button_labels[i], GPIOD_IN);
        if (IS_ERR(gamepad->buttons[i])) {
            dev_err(&pdev->dev, "Failed to get GPIO %s\n", button_labels[i]);
            return PTR_ERR(gamepad->buttons[i]);
        }

        gamepad->irqs[i] = gpiod_to_irq(gamepad->buttons[i]);
        if (gamepad->irqs[i] < 0) {
            dev_err(&pdev->dev, "Failed to get IRQ for GPIO %s\n", button_labels[i]);
            return gamepad->irqs[i];
        }

        error = devm_request_irq(&pdev->dev, gamepad->irqs[i], gpio_gamepad_isr,
                                 IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
                                 button_labels[i], (void *)i);
        if (error) {
            dev_err(&pdev->dev, "Failed to request IRQ for GPIO %s\n", button_labels[i]);
            return error;
        }
    }

    // 注册 input 设备
    error = input_register_device(gamepad->input_dev);
    if (error) {
        dev_err(&pdev->dev, "Failed to register input device\n");
        return error;
    }

    // 保存 platform 设备的数据
    platform_set_drvdata(pdev, gamepad);

    dev_info(&pdev->dev, "GPIO Gamepad Driver: Probing successful\n");
    return 0;
}

// Platform 驱动的 remove 函数
static int gpio_gamepad_remove(struct platform_device *pdev)
{
    struct gpio_gamepad_data *gamepad = platform_get_drvdata(pdev);

    input_unregister_device(gamepad->input_dev);

    dev_info(&pdev->dev, "GPIO Gamepad Driver: Removed\n");
    return 0;
}

// Platform 驱动结构
static struct platform_driver gpio_gamepad_driver = {
    .probe = gpio_gamepad_probe,
    .remove = gpio_gamepad_remove,
    .driver = {
        .name = DRIVER_NAME,
        .owner = THIS_MODULE,
        .of_match_table = of_match_ptr(gpio_gamepad_of_match),
    },
};

module_platform_driver(gpio_gamepad_driver);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name <your.email@example.com>");
MODULE_DESCRIPTION("GPIO Gamepad Driver");
MODULE_VERSION("1.0");
3. 编译和加载驱动程序
将驱动程序保存为 gpio_gamepad.c。

使用 Makefile 编译驱动程序：

makefile
复制
obj-m += gpio_gamepad.o

all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
编译驱动程序：

bash
复制
make
加载驱动程序：

bash
复制
sudo insmod gpio_gamepad.ko
测试按键事件：

bash
复制
evtest /dev/input/eventX
卸载驱动程序：

bash
复制
sudo rmmod gpio_gamepad
